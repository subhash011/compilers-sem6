
(* This line is just to get syntax highlighting in vscode *)
fun x _ = 1;

%%

%name Tiger

%eop EOF
%verbose
%pure
%noshift EOF
%pos int

%term ID        of Symbol.symbol
    | INT       of int
    | STRING    of string
    (* Symbols *)
    | COMMA
    | COLON
    | SEMI_COLON
    | LPAREN
    | RPAREN
    | LSQUARE
    | RSQUARE
    | LCURLY
    | RCURLY
    | DOT
    | PLUS
    | MINUS
    | MUL
    | DIV
    | EQ
    | NE
    | LT
    | LE
    | GT
    | GE
    | AND
    | OR
    | ASSIGN
    (* keywords *)
    | ARRAY
    | IF
    | THEN
    | ELSE
    | WHILE
    | FOR
    | TO
    | DO
    | LET
    | IN
    | END
    | OF
    | BREAK
    | NIL
    | FUNCTION
    | VAR
    | TYPE
    | PRIMITIVE
    (* Object reltated keywords *)
    | CLASS
    | EXTENDS
    | METHOD
    | NEW
    (* Others *)
    | EOF
    | NEWLINE
    | UMINUS
    | LOWPREC

%nonterm Program        of Tiger.ast
        | Exp           of Tiger.Exp
        | Exps          of Tiger.Exp list
        | CallArgs      of Tiger.Exp list
        | Dec           of Tiger.Dec
        | Decs          of Tiger.Dec list
        | Array         of {type_: Tiger.TypeId, length: Tiger.Exp, init: Tiger.Exp}
        | Record        of {type_: Tiger.TypeId, init: {name: Tiger.id, value: Tiger.Exp} list}
        | RecordField   of {name: Tiger.id, value: Tiger.Exp}
        | RecordFields  of {name: Tiger.id, value: Tiger.Exp} list
        | LvalExp       of Tiger.Lvalue
        | LvalTail      of Tiger.Lvalue
        | ObjCreate     of Tiger.TypeId
        | FunctionCall  of {name: Tiger.id, args: Tiger.Exp list}
        | MethodCall    of {object: Tiger.Lvalue, name: Tiger.id, args: Tiger.Exp list}
        | Negate        of {left: Tiger.Exp, oper: Tiger.BinOp, right: Tiger.Exp}
        | Op            of {left: Tiger.Exp, oper: Tiger.BinOp, right: Tiger.Exp}
        | Assignment    of {object: Tiger.Lvalue, exp: Tiger.Exp}
        | IfElse        of {cond: Tiger.Exp, succ: Tiger.Exp, fail: Tiger.Exp option}
        | While         of {cond: Tiger.Exp, body: Tiger.Exp}
        | For           of {init: {name: Tiger.id, exp: Tiger.Exp}, exit_cond: Tiger.Exp, body: Tiger.Exp}
        | Let           of {decs: Tiger.Dec list, body: Tiger.Exp list}
        | Variable      of Tiger.id
        | Type          of Tiger.Type
        | TypeDec       of {name: Tiger.id, type_: Tiger.Type}
        | ClassDec      of {name: Tiger.id, extends: Tiger.TypeId option, classfields: Tiger.ClassField list}
        | VarDec        of {name: Tiger.id, type_: Tiger.TypeId option, init: Tiger.Exp}
        | FunDec        of Tiger.FunDecType
        | PrimitiveDec  of Tiger.FunDecType
        | MethodDec     of Tiger.FunDecType
        | FunDecType    of {name: Tiger.id, args: Tiger.TyFields, ret: Tiger.TypeId option, body: Tiger.Exp}
        | AttrDec       of {name: Tiger.id, type_: Tiger.TypeId option, init: Tiger.Exp}
        | ClassFields   of Tiger.ClassField list
        | ClassField    of Tiger.ClassField
        | TypeAlias     of Tiger.TypeId
        | RecordType    of Tiger.TyFields
        | ArrayType     of Tiger.TypeId
        | ClassType     of {extends: Tiger.TypeId option, classfields: Tiger.ClassField list}
        | TyField       of {name: Tiger.id, type_: Tiger.TypeId}
        | TyFields      of {name: Tiger.id, type_: Tiger.TypeId} list


%keyword ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF BREAK NIL FUNCTION VAR TYPE PRIMITIVE CLASS EXTENDS METHOD NEW
%start Program

%nonassoc
%nonassoc DO OF FUNCTION TYPE TO
%nonassoc ASSIGN
(* Right associativity leads to shifting and we
want else to be bound to the nearest if so we shift *)
%right THEN ELSE
(* Operator *)
%left OR
%left AND
%nonassoc GE LE EQ NE LT GT
%left PLUS MINUS
%left MUL DIV
%left UMINUS

%%

Program: Exp                                                            (Tiger.Expr Exp)
        | Decs                                                          (Tiger.Decs Decs)

Exp: NIL                                                                (Tiger.Nil)
    | ID                                                                (Tiger.LvalExp (Tiger.Variable ID))
    | INT                                                               (Tiger.Int INT)
    | STRING                                                            (Tiger.String STRING)
    | FunctionCall                                                      (Tiger.FunctionCall FunctionCall)
    | MethodCall                                                        (Tiger.MethodCall MethodCall)
    | Array                                                             (Tiger.Array Array)
    | Record                                                            (Tiger.Record Record)
    | LvalTail                                                          (Tiger.LvalExp LvalTail)
    | Negate                                                            (Tiger.Op Negate)
    | Op                                                                (Tiger.Op Op)
    | Assignment                                                        (Tiger.Assignment Assignment)
    | IfElse                                                            (Tiger.IfElse IfElse)
    | While                                                             (Tiger.While While)
    | For                                                               (Tiger.For For)
    | BREAK                                                             (Tiger.Break)
    | Let                                                               (Tiger.Let Let)
    | LPAREN Exps RPAREN                                                (Tiger.Exps Exps)
    | NEW ID                                                            (Tiger.New ID)

Exps:                                                                   ([])
    | Exp                                                               ([Exp])
    | Exp SEMI_COLON Exps                                               (Exp :: Exps)

Op: Exp PLUS Exp                                                        ({left = Exp1, oper = Tiger.Plus, right = Exp2})
    | Exp MINUS Exp                                                     ({left = Exp1, oper = Tiger.Minus, right = Exp2})
    | Exp MUL Exp                                                       ({left = Exp1, oper = Tiger.Mul, right = Exp2})
    | Exp DIV Exp                                                       ({left = Exp1, oper = Tiger.Div, right = Exp2})
    | Exp EQ Exp                                                        ({left = Exp1, oper = Tiger.Eq, right = Exp2})
    | Exp NE Exp                                                        ({left = Exp1, oper = Tiger.Ne, right = Exp2})
    | Exp LT Exp                                                        ({left = Exp1, oper = Tiger.Lt, right = Exp2})
    | Exp GT Exp                                                        ({left = Exp1, oper = Tiger.Gt, right = Exp2})
    | Exp GE Exp                                                        ({left = Exp1, oper = Tiger.Ge, right = Exp2})
    | Exp LE Exp                                                        ({left = Exp1, oper = Tiger.Le, right = Exp2})
    | Exp AND Exp                                                       ({left = Exp1, oper = Tiger.And, right = Exp2})
    | Exp OR Exp                                                        ({left = Exp1, oper = Tiger.Or, right = Exp2})

Assignment: LvalExp ASSIGN Exp                                          ({object = LvalExp, exp = Exp})

IfElse: IF Exp THEN Exp                                                 ({cond = Exp1, succ = Exp2, fail = NONE})
        | IF Exp THEN Exp ELSE Exp                                      ({cond = Exp1, succ = Exp2, fail = SOME Exp3})

While: WHILE Exp DO Exp                                                 ({cond = Exp1, body = Exp2})

For: FOR ID ASSIGN Exp TO Exp DO Exp                                    ({init = {name = ID, exp = Exp1}, exit_cond = Exp2, body = Exp3})

Let: LET Decs IN Exps END                                               ({decs = Decs, body = Exps})

Decs:                                                                   ([])
    | Dec Decs                                                          (Dec :: Decs)
    | Dec SEMI_COLON Decs                                               (Dec :: Decs)

Negate: MINUS Exp %prec UMINUS                                          ({left = Tiger.Int 0, oper = Tiger.Minus, right = Exp})

Array: ID LSQUARE Exp RSQUARE OF Exp                                    ({type_ = ID, length = Exp1 , init = Exp2})

Record: ID LCURLY RecordFields RCURLY                                   ({type_ = ID, init = RecordFields})

RecordFields:                                                           ([])
            | RecordField                                               ([RecordField])
            | RecordField COMMA RecordFields                            (RecordField :: RecordFields)

RecordField: ID EQ Exp                                                  ({name = ID, value = Exp})

LvalExp: ID                                                             (Tiger.Variable ID)
    | LvalTail                                                          (LvalTail)

LvalTail: LvalExp DOT ID                                                (Tiger.Reference {object = LvalExp, name = ID})
        | ID LSQUARE Exp RSQUARE                                        (Tiger.ArrayAccess {object = Tiger.Variable ID, index = Exp})
        | LvalTail LSQUARE Exp RSQUARE                                  (Tiger.ArrayAccess {object = LvalTail, index = Exp})

Dec: TYPE ID EQ Type                                                    (Tiger.TypeDec {name = ID, type_ = Type})
    | VarDec                                                            (Tiger.VarDec VarDec)
    | FunDec                                                            (Tiger.FunDec FunDec)
    | ClassDec                                                          (Tiger.ClassDec ClassDec)
    | PrimitiveDec                                                      (Tiger.PrimitiveDec PrimitiveDec)

ClassDec: CLASS ID LCURLY ClassFields RCURLY                            ({name = ID, extends = NONE, classfields = ClassFields})
        | CLASS ID EXTENDS ID LCURLY ClassFields RCURLY                 ({name = ID1, extends = SOME ID2, classfields = ClassFields})

VarDec: VAR ID ASSIGN Exp                                               ({name = ID, type_ = NONE, init = Exp})
        | VAR ID COLON ID ASSIGN Exp                                    ({name = ID1, type_ = SOME ID2, init = Exp})

AttrDec: VAR ID ASSIGN Exp                                               ({name = ID, type_ = NONE, init = Exp})
        | VAR ID COLON ID ASSIGN Exp                                     ({name = ID1, type_ = SOME ID2, init = Exp})

FunDec: FUNCTION FunDecType                                             (FunDecType)

PrimitiveDec: PRIMITIVE FunDecType                                      (FunDecType)

MethodDec: METHOD FunDecType                                            (FunDecType)

Type: ID                                                                (Tiger.TypeAlias ID)
    | RecordType                                                        (Tiger.RecordType RecordType)
    | ArrayType                                                         (Tiger.ArrayType ArrayType)
    | ClassType                                                         (Tiger.ClassType ClassType)

FunDecType: ID LPAREN TyFields RPAREN EQ Exp                            ({name = ID, args = TyFields, ret = NONE, body = Exp})
        | ID LPAREN TyFields RPAREN COLON ID EQ Exp                     ({name = ID1, args = TyFields, ret = SOME ID2, body = Exp})

RecordType: LCURLY TyFields RCURLY                                      (TyFields)

ArrayType: ARRAY OF ID                                                  (ID)

ClassType: CLASS LCURLY ClassFields RCURLY                              ({extends = NONE, classfields = ClassFields})
        | CLASS EXTENDS ID LCURLY ClassFields RCURLY                    ({extends = SOME ID, classfields = ClassFields})

ClassFields:                                                            ([])
        | ClassField ClassFields                                        (ClassField :: ClassFields)
        | ClassField SEMI_COLON ClassFields                             (ClassField :: ClassFields)

ClassField: AttrDec                                                     (Tiger.AttrDec AttrDec)
        | MethodDec                                                     (Tiger.MethodDec MethodDec)

TyFields:                                                               ([])
        | TyField                                                       ([TyField])
        | TyField COMMA TyFields                                        (TyField :: TyFields)

TyField: ID COLON ID                                                    ({name = ID1, type_ = ID2})

FunctionCall: ID LPAREN CallArgs RPAREN                                 ({name = ID, args = CallArgs})

MethodCall: LvalExp DOT ID LPAREN CallArgs RPAREN                       ({object = LvalExp, name = ID, args = CallArgs})

CallArgs:                                                               ([])
        | Exp                                                           ([Exp])
        | Exp COMMA CallArgs                                            (Exp :: CallArgs)